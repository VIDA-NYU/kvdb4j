plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.vida-nyu'
version '0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.esotericsoftware.kryo', name: 'kryo', version: '2.21'
    implementation group: 'org.rocksdb', name: 'rocksdbjni', version: '6.2.2'
    implementation group: 'org.iq80.leveldb', name: 'leveldb', version: '0.12'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Setup publishing to Maven repositories
publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = version

            from components.java

            pom {
                name = 'KVDB4J'
                description = 'A simple Java interface for multiple key-value stores.'
                url = 'https://github.com/VIDA-NYU/kvdb4j'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'AÃ©cio Santos'
                        email = '150570+aecio@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:VIDA-NYU/kvdb4j.git'
                    url = 'https://github.com/VIDA-NYU/kvdb4j'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

// Configure artifact signing (required for publishing to Sonatype maven repository)
signing {
    //
    // The following setup allows to pass the key identifier, secret key (in ascii-armored
    // format), and the password using the following environment variables respectively:
    // - ORG_GRADLE_PROJECT_signingKey
    // - ORG_GRADLE_PROJECT_signingPassword
    //
    // Command line example for singing maven publication:
    //   ORG_GRADLE_PROJECT_signingKey=$(cat ~/.gnupg/kvdb4j.asc) \
    //   ORG_GRADLE_PROJECT_signingPassword=$SIGNING_KEY_PWD \
    //   gradle signMavenPublication
    //
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    // Specify what should be signed (the maven publication)
    sign publishing.publications.maven
}

